variables:
  IMAGE_NAME: funkwhale/funkwhale
  IMAGE: $IMAGE_NAME:$CI_COMMIT_REF_NAME
  IMAGE_LATEST: $IMAGE_NAME:latest
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/pip-cache"
  PYTHONDONTWRITEBYTECODE: "true"


stages:
  - review
  - lint
  - test
  - build
  - deploy

review_front:
  stage: review
  image: node:9
  when: manual
  allow_failure: true
  before_script:
    - apt-get update
    - apt-get install jq -y
    - cd front
  script:
    - yarn install
    - yarn run i18n-compile
    # this is to ensure we don't have any errors in the output,
    # cf https://code.eliotberriot.com/funkwhale/funkwhale/issues/169
    - INSTANCE_URL=$REVIEW_INSTANCE_URL yarn run build | tee /dev/stderr | (! grep -i 'ERROR in')
    - mkdir -p /static/front/$CI_BUILD_REF_SLUG
    - cp -r dist/* /static/front/$CI_BUILD_REF_SLUG
  cache:
    key: "$CI_PROJECT_ID__front_dependencies"
    paths:
      - front/node_modules
      - front/yarn.lock
  environment:
    name: review/front-$CI_BUILD_REF_NAME
    url: http://front-$CI_BUILD_REF_SLUG.$REVIEW_DOMAIN
    on_stop: stop_front_review
  only:
    - branches@funkwhale/funkwhale
  tags:
    - funkwhale-review

stop_front_review:
  stage: review
  script:
    - rm -rf /static/front/$CI_BUILD_REF_SLUG/
  variables:
    GIT_STRATEGY: none
  when: manual
  environment:
    name: review/front-$CI_BUILD_REF_NAME
    action: stop
  tags:
    - funkwhale-review

review_docs:
  stage: review
  image: python:3.6
  when: manual
  allow_failure: true
  variables:
    BUILD_PATH: "../public"
  before_script:
    - cd docs
    - apt-get update
    - apt-get install -y graphviz
    - pip install sphinx

  cache:
    key: "$CI_PROJECT_ID__sphinx"
    paths:
      - "$PIP_CACHE_DIR"
  script:
    - ./build_docs.sh
    - mkdir -p /static/docs/$CI_BUILD_REF_SLUG
    - cp -r $CI_PROJECT_DIR/public/* /static/docs/$CI_BUILD_REF_SLUG
  environment:
    name: review/docs-$CI_BUILD_REF_NAME
    url: http://docs-$CI_BUILD_REF_SLUG.$REVIEW_DOMAIN
    on_stop: stop_docs_review
  only:
    - branches@funkwhale/funkwhale
  tags:
    - funkwhale-review

stop_docs_review:
  stage: review
  script:
    - rm -rf /static/docs/$CI_BUILD_REF_SLUG/
  variables:
    GIT_STRATEGY: none
  when: manual
  environment:
    name: review/docs-$CI_BUILD_REF_NAME
    action: stop
  tags:
    - funkwhale-review

black:
  image: python:3.6
  stage: lint
  variables:
    GIT_STRATEGY: fetch
  before_script:
    - pip install black
  script:
    - black --exclude "/(\.git|\.hg|\.mypy_cache|\.tox|\.venv|_build|buck-out|build|dist|migrations)/" --check --diff api/

flake8:
  image: python:3.6
  stage: lint
  variables:
    GIT_STRATEGY: fetch
  before_script:
    - pip install flake8
  script:
    - flake8 -v api
  cache:
    key: "$CI_PROJECT_ID__flake8_pip_cache"
    paths:
      - "$PIP_CACHE_DIR"

test_api:
  services:
    - postgres:9.4
    - redis:3
  stage: test
  image: funkwhale/funkwhale:latest
  cache:
    key: "$CI_PROJECT_ID__pip_cache"
    paths:
      - "$PIP_CACHE_DIR"
  variables:
    DJANGO_ALLOWED_HOSTS: "localhost"
    DATABASE_URL: "postgresql://postgres@postgres/postgres"
    FUNKWHALE_URL: "https://funkwhale.ci"
    CACHEOPS_ENABLED: "false"
    DJANGO_SETTINGS_MODULE: config.settings.local

  before_script:
    - cd api
    - pip install -r requirements/base.txt
    - pip install -r requirements/local.txt
    - pip install -r requirements/test.txt
  script:
    - pytest --cov=funkwhale_api tests/
  tags:
    - docker


test_front:
  stage: test
  image: node:9
  before_script:
    - cd front

  script:
    - yarn install
    - yarn run unit
  cache:
    key: "$CI_PROJECT_ID__front_dependencies"
    paths:
      - front/node_modules
      - front/yarn.lock
  artifacts:
    name: "front_${CI_COMMIT_REF_NAME}"
    paths:
      - front/dist/
  tags:
    - docker


build_front:
  stage: build
  image: node:9
  before_script:
    - apt-get update
    - apt-get install jq -y
    - cd front
  script:
    - yarn install
    - yarn run i18n-compile
    # this is to ensure we don't have any errors in the output,
    # cf https://code.eliotberriot.com/funkwhale/funkwhale/issues/169
    - yarn run build | tee /dev/stderr | (! grep -i 'ERROR in')
    - chmod -R 750 front/dist
  cache:
    key: "$CI_PROJECT_ID__front_dependencies"
    paths:
      - front/node_modules
      - front/yarn.lock
  artifacts:
    name: "front_${CI_COMMIT_REF_NAME}"
    paths:
      - front/dist/
  only:
    - tags@funkwhale/funkwhale
    - master@funkwhale/funkwhale
    - develop@funkwhale/funkwhale
  tags:
    - docker


pages:
  stage: test
  image: python:3.6
  variables:
    BUILD_PATH: "../public"
  before_script:
    - cd docs
    - apt-get update
    - apt-get install -y graphviz
    - pip install sphinx
  script:
    - ./build_docs.sh
  cache:
    key: "$CI_PROJECT_ID__sphinx"
    paths:
      - "$PIP_CACHE_DIR"
  artifacts:
    paths:
      - public
  only:
    - develop@funkwhale/funkwhale
  tags:
    - docker

docker_release:
  stage: deploy
  before_script:
    - docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
    - cp -r front/dist api/frontend
    - cd api
  script:
    - docker build -t $IMAGE .
    - docker push $IMAGE
  only:
    - develop@funkwhale/funkwhale
    - tags@funkwhale/funkwhale
  tags:
    - docker-build

build_api:
  # Simply publish a zip containing api/ directory
  stage: deploy
  image: busybox
  artifacts:
    name: "api_${CI_COMMIT_REF_NAME}"
    paths:
      - api
  script:
    - chmod -R 750 api
    - echo Done!
  only:
    - tags@funkwhale/funkwhale
    - master@funkwhale/funkwhale
    - develop@funkwhale/funkwhale
