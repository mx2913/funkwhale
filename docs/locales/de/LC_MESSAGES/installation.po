# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, The Funkwhale Collective
# This file is distributed under the same license as the funkwhale package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: funkwhale 1.2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-02 19:17+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../installation/debian.rst:2
msgid "Debian and Arch Linux installation"
msgstr ""

#: ../../installation/debian.rst:6
msgid ""
"This guide targets Debian 10 (Buster), which is the latest version "
"available, as well as Arch Linux."
msgstr ""

#: ../../installation/debian.rst:9
msgid "Cache setup (Redis)"
msgstr ""

#: ../../installation/debian.rst:11
msgid "Funkwhale requires a cache server:"
msgstr ""

#: ../../installation/debian.rst:13
msgid ""
"to make the whole system faster, by caching network requests or database "
"queries;"
msgstr ""

#: ../../installation/debian.rst:14
msgid "to handle asynchronous tasks such as music import."
msgstr ""

#: ../../installation/debian.rst:16
msgid ""
"On Debian-like distributions, a redis package is available, and you can "
"install it:"
msgstr ""

#: ../../installation/debian.rst:23 ../../installation/debian.rst:45
#: ../../installation/debian.rst:244 ../../installation/index.rst:202
msgid "On Arch Linux and its derivatives:"
msgstr ""

#: ../../installation/debian.rst:29
msgid "This should be enough to have your redis server set up."
msgstr ""

#: ../../installation/debian.rst:32
msgid "Install system dependencies"
msgstr ""

#: ../../installation/debian.rst:34
msgid "On Debian-like systems, you can install them using:"
msgstr ""

#: ../../installation/debian.rst:56
msgid "External Authentication (LDAP)"
msgstr ""

#: ../../installation/debian.rst:58
msgid ""
"LDAP support requires some additional dependencies to enable. On the OS "
"level both ``libldap2-dev`` and ``libsasl2-dev`` are required, and the "
"Python modules ``python-ldap`` and ``python-django-auth-ldap`` must be "
"installed. These dependencies are all included in the ``requirements.*`` "
"files so deploying with those will install these dependencies by default."
" However, they are not required unless LDAP support is explicitly "
"enabled. See :doc:`../admin/ldap` for more details."
msgstr ""

#: ../../installation/debian.rst:61
msgid "Installation structure"
msgstr ""

#: ../../installation/debian.rst:63
msgid ""
"All Funkwhale-related files will be located under ``/srv/funkwhale`` "
"apart from database files and a few configuration files. We will also "
"have a dedicated ``funkwhale`` user to launch the processes we need and "
"own those files."
msgstr ""

#: ../../installation/debian.rst:67
msgid ""
"You are free to use different values here, just remember to adapt those "
"in the next steps."
msgstr ""

#: ../../installation/debian.rst:72 ../../installation/docker.rst:46
msgid "Create the user and the directory:"
msgstr ""

#: ../../installation/debian.rst:79 ../../installation/docker.rst:53
msgid "Log in as the newly created user from now on:"
msgstr ""

#: ../../installation/debian.rst:85
msgid "Now let's setup our directory layout. Here is how it will look like::"
msgstr ""

#: ../../installation/debian.rst:94
msgid "Create the aforementioned directories:"
msgstr ""

#: ../../installation/debian.rst:100
msgid ""
"The ``virtualenv`` directory is a bit special and will be created "
"separately."
msgstr ""

#: ../../installation/debian.rst:103
msgid "Download the latest Funkwhale release"
msgstr ""

#: ../../installation/debian.rst:105
msgid "Funkwhale is splitted in two components:"
msgstr ""

#: ../../installation/debian.rst:107
msgid "The API, which will handle music storage and user accounts;"
msgstr ""

#: ../../installation/debian.rst:108
msgid ""
"The frontend, that will simply connect to the API to interact with its "
"data."
msgstr ""

#: ../../installation/debian.rst:110
msgid ""
"Those components are packaged in subsequent releases, such as 0.1, 0.2, "
"etc. You can browse the :doc:`changelog </changelog>` for a list of "
"available releases and pick the one you want to install, usually the "
"latest one should be okay."
msgstr ""

#: ../../installation/debian.rst:114
msgid ""
"In this guide, we will assume you want to install the latest version of "
"Funkwhale, which is |version|:"
msgstr ""

#: ../../installation/debian.rst:116
msgid "First, we will download the latest api release:"
msgstr ""

#: ../../installation/debian.rst:126
msgid "Then we will download the frontend files:"
msgstr ""

#: ../../installation/debian.rst:137
msgid ""
"You can also choose to get the code directly from the git repo. In this "
"case, run::"
msgstr ""

#: ../../installation/debian.rst:146
msgid ""
"The above clone command uses the stable branch instead of the default "
"develop branch, as stable is stable and more suited for production "
"setups."
msgstr ""

#: ../../installation/debian.rst:148
msgid "You'll also need to re-create the folders we make earlier::"
msgstr ""

#: ../../installation/debian.rst:152
msgid ""
"You will still need to get the frontend files as specified before, "
"because we're not going to build them."
msgstr ""

#: ../../installation/debian.rst:156
msgid ""
"You can leave the ZIP archives in the directory, this will help you know "
"which version you've installed next time you want to upgrade your "
"installation."
msgstr ""

#: ../../installation/debian.rst:160
msgid "Install Python dependencies"
msgstr ""

#: ../../installation/debian.rst:162
msgid ""
"We use `poetry <https://python-poetry.org/>`_ to manage Python "
"dependencies. Poetry installs packages in a `virtualenv "
"<https://docs.python.org/3/library/venv.html>`_. This prevents collisions"
" with other Python packages on your system. To install poetry, check out "
"`their documentation <https://python-poetry.org/docs/#installation>`_."
msgstr ""

#: ../../installation/debian.rst:167
msgid ""
"By default, poetry creates a virtualenv in `{cache-dir}/virtualenvs`. We "
"recommend creating your virtualenv inside your Funkwhale `api` directory."
" To do this, navigate to the directory and run the :command:`poetry "
"config virtualenvs.in-project` command."
msgstr ""

#: ../../installation/debian.rst:177
msgid "Poetry creates a virtualenv in `/srv/funkwhale/api/.venv`."
msgstr ""

#: ../../installation/debian.rst:180
msgid ""
"To run Funkwhale commands, you need to activate the virtualenv using "
"poetry. To make copying and pasting from this guide easier, we prefix all"
" commands with :command:`poetry run`. If you use :command:`poetry shell` "
"to enter your virtualenv, make sure you remove :command:`poetry run` from"
" each command."
msgstr ""

#: ../../installation/debian.rst:186
msgid ""
"Once you have set up your virtualenv, install the dependencies using "
":command:`poetry install`."
msgstr ""

#: ../../installation/debian.rst:195
msgid "Environment file"
msgstr ""

#: ../../installation/debian.rst:197
msgid ""
"You can now start to configure Funkwhale. The main way to achieve that is"
" by adding an environment file that will host settings that are relevant "
"to your installation."
msgstr ""

#: ../../installation/debian.rst:201
msgid "Download the sample environment file:"
msgstr ""

#: ../../installation/debian.rst:209
msgid ""
"if you used git to get the latest version of the code earlier, you can "
"instead do::"
msgstr ""

#: ../../installation/debian.rst:214
msgid "Generate a secret key for Django::"
msgstr ""

#: ../../installation/debian.rst:218
msgid ""
"You can then edit the file: the file is heavily commented, and the most "
"relevant configuration options are mentioned at the top of the file."
msgstr ""

#: ../../installation/debian.rst:226
msgid ""
"Paste the secret key you generated earlier at the entry "
"``DJANGO_SECRET_KEY`` and populate the ``DATABASE_URL`` and ``CACHE_URL``"
" values based on how you configured your PostgreSQL and Redis servers in."
msgstr ""

#: ../../installation/debian.rst:232
msgid "Database setup"
msgstr ""

#: ../../installation/debian.rst:234
msgid ""
"Funkwhale requires a PostgreSQL database to work properly. Please refer "
"to the `PostgreSQL documentation <https://www.postgresql.org/download/>`_"
" for installation instructions specific to your os."
msgstr ""

#: ../../installation/debian.rst:238
msgid "On Debian-like systems, you would install the database server like this:"
msgstr ""

#: ../../installation/debian.rst:250
msgid ""
"On Arch Linux, you'll also need to initialize the database. See `the Arch"
" Linux wiki "
"<https://wiki.archlinux.org/index.php/Postgresql#Initial_configuration>`_."
msgstr ""

#: ../../installation/debian.rst:252
msgid ""
"The remaining steps are heavily inspired from `this Digital Ocean guide "
"<https://www.digitalocean.com/community/tutorials/how-to-set-up-django-"
"with-postgres-nginx-and-gunicorn-on-ubuntu-16-04>`_."
msgstr ""

#: ../../installation/debian.rst:254
msgid "Open a database shell:"
msgstr ""

#: ../../installation/debian.rst:260
msgid "Create the project database and user:"
msgstr ""

#: ../../installation/debian.rst:270
msgid ""
"It's important that you use utf-8 encoding for your database, otherwise "
"you'll end up with errors and crashes later on when dealing with music "
"metadata that contains non-ascii chars."
msgstr ""

#: ../../installation/debian.rst:274
msgid ""
"Assuming you already have :ref:`created your funkwhale user <create-"
"funkwhale-user>`, you should now be able to open a postgresql shell:"
msgstr ""

#: ../../installation/debian.rst:281
msgid ""
"Unless you give a superuser access to the database user, you should also "
"enable some extensions on your database server, as those are required for"
" Funkwhale to work properly:"
msgstr ""

#: ../../installation/debian.rst:290
msgid ""
"Now that the database has been created, import the initial database "
"structure using the virtualenv created before:"
msgstr ""

#: ../../installation/debian.rst:296
msgid "This creates the required tables and rows."
msgstr ""

#: ../../installation/debian.rst:300
msgid ""
"You can safely execute this command any time you want, this will only run"
" unapplied migrations."
msgstr ""

#: ../../installation/debian.rst:305 ../../installation/docker.rst:199
msgid "You may sometimes get the following warning while applying migrations::"
msgstr ""

#: ../../installation/debian.rst:309 ../../installation/docker.rst:203
msgid ""
"This is a warning, not an error, and it can be safely ignored. Never run "
"the ``makemigrations`` command yourself."
msgstr ""

#: ../../installation/debian.rst:313
msgid "Create an admin account"
msgstr ""

#: ../../installation/debian.rst:315
msgid "Using the virtualenv created before, create your first user account:"
msgstr ""

#: ../../installation/debian.rst:321
msgid ""
"If you ever want to change a user's password from the command line, just "
"run:"
msgstr ""

#: ../../installation/debian.rst:328
msgid "Collect static files"
msgstr ""

#: ../../installation/debian.rst:330
msgid ""
"Static files are the static assets used by the API server (icon PNGs, "
"CSS, etc.). We need to collect them explicitly, so they can be served by "
"the webserver:"
msgstr ""

#: ../../installation/debian.rst:337
msgid ""
"This should populate the directory you choose for the ``STATIC_ROOT`` "
"variable in your ``.env`` file."
msgstr ""

#: ../../installation/debian.rst:341
msgid "Systemd unit file"
msgstr ""

#: ../../installation/debian.rst:345
msgid "All the command lines below should be executed as root."
msgstr ""

#: ../../installation/debian.rst:347
msgid ""
"Systemd offers a convenient way to manage your Funkwhale instance if "
"you're not using docker. We'll see how to setup systemd to properly start"
" a Funkwhale instance."
msgstr ""

#: ../../installation/debian.rst:350
msgid "First, download the sample unitfiles:"
msgstr ""

#: ../../installation/debian.rst:359
msgid "This will download three unitfiles:"
msgstr ""

#: ../../installation/debian.rst:361
msgid "``funkwhale-server.service`` to launch the Funkwhale web server;"
msgstr ""

#: ../../installation/debian.rst:362
msgid "``funkwhale-worker.service`` to launch the Funkwhale task worker;"
msgstr ""

#: ../../installation/debian.rst:363
msgid ""
"``funkwhale-beat.service`` to launch the Funkwhale task beat (this is for"
" recurring tasks);"
msgstr ""

#: ../../installation/debian.rst:364
msgid "``funkwhale.target`` to easily stop and start all of the services at once."
msgstr ""

#: ../../installation/debian.rst:366
msgid ""
"You can of course review and edit them to suit your deployment scenario "
"if needed, but the defaults should be fine."
msgstr ""

#: ../../installation/debian.rst:369
msgid "Once the files are downloaded, reload systemd:"
msgstr ""

#: ../../installation/debian.rst:375
msgid "And start the services:"
msgstr ""

#: ../../installation/debian.rst:381
msgid ""
"To ensure all Funkwhale processes are started automatically after a "
"reboot, run:"
msgstr ""

#: ../../installation/debian.rst:389
msgid "You can check the statuses of all processes like this:"
msgstr ""

#: ../../installation/debian.rst:396
msgid "Reverse proxy setup"
msgstr ""

#: ../../installation/debian.rst:398
msgid "See :ref:`Reverse proxy <reverse-proxy-setup>`."
msgstr ""

#: ../../installation/docker.rst:2
msgid "Docker installation"
msgstr ""

#: ../../installation/docker.rst:4
msgid "Docker is the easiest way to get a Funkwhale instance up and running."
msgstr ""

#: ../../installation/docker.rst:6
msgid "We support two types of Docker deployments:"
msgstr ""

#: ../../installation/docker.rst:8
msgid ""
":ref:`Mono-container <docker-mono-container>`: all processes live in the "
"same container (database, nginx, redis, etc.). It's easier to deploy and "
"to integrate with container management systems like Portainer. However, "
"it's not possible to scale this type of deployment on multiple servers."
msgstr ""

#: ../../installation/docker.rst:9
msgid ""
":ref:`Multi-container <docker-multi-container>`: each process lives in a "
"dedicated container. This setup is more involved but also more flexible "
"and scalable."
msgstr ""

#: ../../installation/docker.rst:13 ../../installation/docker.rst:23
#: ../../installation/index.rst:82
#: ../../installation/non_amd64_architectures.rst:48
msgid ""
"The All-In-One-Container or Mono-Container installation is deprecated, "
"don't use it for new installations. For more information, visit our blog:"
" https://blog.funkwhale.audio/deprecation-all-in-one-container.html"
msgstr ""

#: ../../installation/docker.rst:19
msgid "Mono-container installation"
msgstr ""

#: ../../installation/docker.rst:28
msgid ""
"This installation method was originally contributed by `@thetarkus "
"<https://github.com/thetarkus>`_"
msgstr ""

#: ../../installation/docker.rst:30
msgid "These are the installation steps:"
msgstr ""

#: ../../installation/docker.rst:32 ../../installation/docker.rst:39
msgid "Install docker"
msgstr ""

#: ../../installation/docker.rst:33 ../../installation/docker.rst:44
msgid "Create ``funkwhale`` user"
msgstr ""

#: ../../installation/docker.rst:34 ../../installation/docker.rst:60
msgid "Create ``.env`` file"
msgstr ""

#: ../../installation/docker.rst:35 ../../installation/docker.rst:86
msgid "Create ``docker-compose.yml`` file"
msgstr ""

#: ../../installation/docker.rst:36 ../../installation/docker.rst:117
msgid "Start Funkwhale service"
msgstr ""

#: ../../installation/docker.rst:41
msgid ""
"Ensure you have `Docker <https://docs.docker.com/engine/installation/>`_ "
"and `docker-compose <https://docs.docker.com/compose/install/>`_ "
"installed."
msgstr ""

#: ../../installation/docker.rst:62
msgid "Create a ``.env`` file to store a few important configuration options:"
msgstr ""

#: ../../installation/docker.rst:88
msgid "Create a ``docker-compose.yml`` file to set up the containers:"
msgstr ""

#: ../../installation/docker.rst:112
msgid ""
"The version can be changed (after ``funkwhale/all-in-one:``), `select the"
" version <https://hub.docker.com/r/funkwhale/all-in-one/tags>`_ you want "
"to deploy."
msgstr ""

#: ../../installation/docker.rst:113
msgid ""
"``PUID`` and ``PGID`` are optional but useful to prevent permission "
"issues with docker volumes"
msgstr ""

#: ../../installation/docker.rst:114
msgid ""
"``/path/to/your/music/dir`` should point to a path on your host where "
"music you would like to import is located. You can safely remove the "
"volume if you don't want to import music that way."
msgstr ""

#: ../../installation/docker.rst:119
msgid "Start the container:"
msgstr ""

#: ../../installation/docker.rst:125
msgid ""
"Your container should start in the background, and your instance be "
"available at ``yourip:5000`` shortly."
msgstr ""

#: ../../installation/docker.rst:127
msgid ""
"You will need an admin account to login and manage your account, create "
"one using the following command: ``docker exec -it funkwhale manage "
"createsuperuser``"
msgstr ""

#: ../../installation/docker.rst:129
msgid "Useful commands:"
msgstr ""

#: ../../installation/docker.rst:131
msgid ""
"You can start and stop your instance using ``docker-compose start`` and "
"``docker-compose stop``, respectively"
msgstr ""

#: ../../installation/docker.rst:132
msgid "You can examine the logs by running ``docker logs -f --tail=50 funkwhale``"
msgstr ""

#: ../../installation/docker.rst:133
msgid ""
"To have a better idea of the resource usage of your instance (CPU, "
"memory), run ``docker stats funkwhale``"
msgstr ""

#: ../../installation/docker.rst:135 ../../installation/docker.rst:218
msgid ""
"Now, you just need to configure your :ref:`reverse-proxy <reverse-proxy-"
"setup>`. Don't worry, it's quite easy."
msgstr ""

#: ../../installation/docker.rst:140
msgid "Multi-container installation"
msgstr ""

#: ../../installation/docker.rst:142
msgid ""
"First, ensure you have `Docker "
"<https://docs.docker.com/engine/installation/>`_ and `docker-compose "
"<https://docs.docker.com/compose/install/>`_ installed."
msgstr ""

#: ../../installation/docker.rst:144
msgid ""
"Export the `version you want <https://hub.docker.com/r/funkwhale/all-in-"
"one/tags>`_ to deploy (e.g., ``0.21``):"
msgstr ""

#: ../../installation/docker.rst:150
msgid "Download the sample docker-compose file:"
msgstr ""

#: ../../installation/docker.rst:161
msgid ""
"At this point, the architecture of ``/srv/funkwhale``  should look like "
"that:"
msgstr ""

#: ../../installation/docker.rst:171
msgid "Create your env file:"
msgstr ""

#: ../../installation/docker.rst:181
msgid ""
"Ensure to edit it to match your needs (this file is heavily commented), "
"in particular ``DJANGO_SECRET_KEY`` and ``FUNKWHALE_HOSTNAME``. You "
"should take a look at the `configuration reference "
"<https://docs.funkwhale.audio/configuration.html#configuration-"
"reference>`_ for more detailed information regarding each setting."
msgstr ""

#: ../../installation/docker.rst:184
msgid "Then, you should be able to pull the required images:"
msgstr ""

#: ../../installation/docker.rst:190
msgid "Run the database container and the initial migrations:"
msgstr ""

#: ../../installation/docker.rst:206
msgid "Create your admin user:"
msgstr ""

#: ../../installation/docker.rst:212
msgid "Then launch the whole thing:"
msgstr ""

#: ../../installation/docker.rst:221
msgid "About music acquisition"
msgstr ""

#: ../../installation/docker.rst:223
msgid ""
"If you want to :doc:`import music located on the server <../admin"
"/importing-music>`, you can put it in the ``data/music`` directory and it"
" will become readable by the importer."
msgstr ""

#: ../../installation/index.rst:2
msgid "Installation"
msgstr ""

#: ../../installation/index.rst:5
msgid "Requirements"
msgstr ""

#: ../../installation/index.rst:7
msgid ""
"Regardless of your chosen installation method, the following is required "
"to successfully deploy Funkwhale:"
msgstr ""

#: ../../installation/index.rst:10
msgid ""
"**A dedicated domain or subdomain**: it is not possible to deploy "
"Funkwhale on a subdirectory of an existing domain."
msgstr ""

#: ../../installation/index.rst:11
msgid ""
"**Access to ports 80 and/or 443**: if you cannot serve the Funkwhale web "
"app and API on these ports, federation will not work"
msgstr ""

#: ../../installation/index.rst:15
msgid ""
"Because of the federated nature of Funkwhale, **it is strongly "
"recommended not to change the Funkwhale domain after initial "
"deployment**, as it is likely to break your installation."
msgstr ""

#: ../../installation/index.rst:20
msgid "Project architecture"
msgstr ""

#: ../../installation/index.rst:22
msgid "The project relies on the following components and services to work:"
msgstr ""

#: ../../installation/index.rst:24
msgid "A web application server (Python/Django/Gunicorn)"
msgstr ""

#: ../../installation/index.rst:25
msgid "A PostgreSQL database to store application data"
msgstr ""

#: ../../installation/index.rst:26
msgid "A redis server to store cache and tasks data"
msgstr ""

#: ../../installation/index.rst:27
msgid "A celery worker to run asynchronous tasks (such as music import)"
msgstr ""

#: ../../installation/index.rst:28
msgid "A celery scheduler to run recurrent tasks"
msgstr ""

#: ../../installation/index.rst:29
msgid ""
"A `ntp-synced clock <https://wiki.debian.org/NTP>`_ to ensure federation "
"is working seamlessly"
msgstr ""

#: ../../installation/index.rst:33
msgid ""
"The synced clock is needed for federation purpose, to assess the validity"
" of incoming requests."
msgstr ""

#: ../../installation/index.rst:37
msgid "Hardware requirements"
msgstr ""

#: ../../installation/index.rst:39
msgid ""
"Funkwhale is not especially CPU hungry. On a dockerized instance with 2 "
"CPUs and a few active users, the memory footprint is around 500Mb::"
msgstr ""

#: ../../installation/index.rst:50
msgid ""
"Some users have reported running Funkwhale on Raspberry Pis with a memory"
" consumption of less than 350 MiB."
msgstr ""

#: ../../installation/index.rst:53
msgid ""
"Thus, Funkwhale should run fine on commodity hardware, small hosting "
"boxes and Raspberry Pi. We lack real-world examples of such deployments, "
"so don't hesitate do give us your feedback (either positive or negative)."
msgstr ""

#: ../../installation/index.rst:57
msgid ""
"Check out :doc:`../admin/optimization` for advice on how to tune your "
"instance on small configurations."
msgstr ""

#: ../../installation/index.rst:61
msgid "Software requirements"
msgstr ""

#: ../../installation/index.rst:63
msgid ""
"Software requirements will vary depending of your installation method. "
"For Docker-based installations, the only requirement will be an Nginx "
"reverse-proxy that will expose your instance to the outside world."
msgstr ""

#: ../../installation/index.rst:67
msgid ""
"If you plan to install your Funkwhale instance without Docker, most of "
"the dependencies should be available in your distribution's repositories."
msgstr ""

#: ../../installation/index.rst:72
msgid ""
"Funkwhale works only with Python >= 3.5, as we need support for "
"async/await. Older versions of Python are not supported."
msgstr ""

#: ../../installation/index.rst:76
msgid "Available installation methods"
msgstr ""

#: ../../installation/index.rst:78
msgid "Funkwhale can be installed using one of the following method:"
msgstr ""

#: ../../installation/index.rst:85
msgid "Quick install, the most straight forward way to get Funkwhale;"
msgstr ""

#: ../../installation/index.rst:86
msgid "Mono-container Docker installation;"
msgstr ""

#: ../../installation/index.rst:87
msgid "Multi-container Docker installation;"
msgstr ""

#: ../../installation/index.rst:88
msgid "Manual Debian and Arch Linux installation;"
msgstr ""

#: ../../installation/index.rst:89
msgid "`Ansible role <https://dev.funkwhale.audio/funkwhale/ansible/>`_."
msgstr ""

#: ../../installation/index.rst:91
msgid "Further, Funkwhale packages are available for the following platforms:"
msgstr ""

#: ../../installation/index.rst:93
msgid ""
"`YunoHost 3 <https://yunohost.org/>`_: https://github.com/YunoHost-"
"Apps/funkwhale_ynh (kindly maintained by `@Jibec "
"<https://github.com/Jibec>`_)"
msgstr ""

#: ../../installation/index.rst:94
msgid ""
"ArchLinux (as an AUR package): if you'd rather use a package, check out "
"this alternative installation method on ArchLinux: "
"https://wiki.archlinux.org/index.php/Funkwhale (package and wiki kindly "
"maintained by getzee)"
msgstr ""

#: ../../installation/index.rst:95
msgid ""
"`NixOS <https://github.com/mmai/funkwhale-nixos>`_ (kindly maintained by "
"@mmai)"
msgstr ""

#: ../../installation/index.rst:96
msgid ""
"`Helm chart <https://gitlab.com/ananace/charts/>`_ to install Funkwhale "
"on Kubernetes (kindly maintained by `@ananace "
"<https://gitlab.com/ananace>`_)"
msgstr ""

#: ../../installation/index.rst:97
msgid "`HomelabOS <https://homelabos.com/docs/software/funkwhale/>`_"
msgstr ""

#: ../../installation/index.rst:100
msgid "Quick install"
msgstr ""

#: ../../installation/index.rst:102
msgid ""
"To install the latest version of Funkwhale on a recent Debian or Ubuntu "
"server, run::"
msgstr ""

#: ../../installation/index.rst:108
msgid ""
"This installation script will ask you a few questions, install the "
"required dependencies and set up your instance."
msgstr ""

#: ../../installation/index.rst:111
msgid "Additional info:"
msgstr ""

#: ../../installation/index.rst:113
msgid ""
"This script is based on our `Ansible role "
"<https://dev.funkwhale.audio/funkwhale/ansible/>`_."
msgstr ""

#: ../../installation/index.rst:114
msgid ""
"By default, the script installs Nginx, PostgreSQL, Redis and Funkwhale "
"itself but you can customize the installation procedure if you already "
"have some of these services available on your machine"
msgstr ""

#: ../../installation/index.rst:115
msgid ""
"Edit your pod configuration in ``/srv/funkwhale/ansible/playbook.yml`` "
"and apply new configuration with ``sudo "
"/srv/funkwhale/ansible/reconfigure``"
msgstr ""

#: ../../installation/index.rst:116
msgid ""
"Upgrade is done using ``sh -c \"$(curl -sSL "
"https://get.funkwhale.audio/upgrade.sh)\"``."
msgstr ""

#: ../../installation/index.rst:120
msgid "Alternative installation methods"
msgstr ""

#: ../../installation/index.rst:130
msgid "Running Funkwhale on the develop branch"
msgstr ""

#: ../../installation/index.rst:132
msgid ""
"Traditional deployments are done using tagged releases. However, you may "
"want to benefit from the latest changes available, or to help detect bugs"
" before they are included in actual releases."
msgstr ""

#: ../../installation/index.rst:136
msgid ""
"To do that, you'll need to run your instance on the develop branch, which"
" contains all the unreleased changes and features of the next version."
msgstr ""

#: ../../installation/index.rst:139
msgid ""
"Please take into account that the develop branch may be unstable and will"
" contain bugs that may affect the well-being of your instance. If you are"
" comfortable with that, you need to backup at least your database before "
"pulling the latest changes from the develop branch."
msgstr ""

#: ../../installation/index.rst:144
msgid ""
"Otherwise, the deployment process is similar to deploying with releases. "
"You simply need to use ``export FUNKWHALE_VERSION=develop`` in the "
"installation and upgrade process instead of a real version number, as we "
"build artifacts on the development branch the same way we do for "
"releases."
msgstr ""

#: ../../installation/index.rst:149
msgid ""
"It's also recommended to check out the `develop release notes "
"<https://dev.funkwhale.audio/funkwhale/funkwhale/blob/develop/changes/notes.rst>`_"
" before upgrading, since you may have to apply manual actions for your "
"instance to continue to work. Such actions are labelled with ``[manual "
"action required]`` in the releases notes."
msgstr ""

#: ../../installation/index.rst:155
msgid "Serving only the frontend"
msgstr ""

#: ../../installation/index.rst:159
msgid ""
"You do not need to do this if you are deploying using Docker, as frontend"
" files are already included in the docker image."
msgstr ""

#: ../../installation/index.rst:162
msgid ""
"You also do not need to do this if you are deploying manually on Debian "
"or Arch, as this is covered by the corresponding documentation already."
msgstr ""

#: ../../installation/index.rst:166
msgid ""
"Files for the web frontend are purely static and can simply be "
"downloaded, unzipped and served from any webserver:"
msgstr ""

#: ../../installation/index.rst:177
msgid "Reverse proxy configuration"
msgstr ""

#: ../../installation/index.rst:179
msgid ""
"In order to make Funkwhale accessible from outside your server and to "
"play nicely with other applications on your machine, you should configure"
" a reverse proxy."
msgstr ""

#: ../../installation/index.rst:183
msgid "We offer sample configurations for Nginx, Apache2 and Caddy."
msgstr ""

#: ../../installation/index.rst:187
msgid ""
"You can freely adapt the proposed configuration to your own needs, as we "
"cannot cover every use case with a single template, especially when it's "
"related to SSL configuration."
msgstr ""

#: ../../installation/index.rst:192
msgid "Nginx"
msgstr ""

#: ../../installation/index.rst:194
msgid ""
"Ensure you have a recent version of nginx on your server. On a Debian-"
"based system use apt:"
msgstr ""

#: ../../installation/index.rst:208
msgid ""
"To avoid configuration errors at this level, we will generate an nginx "
"configuration using your .env file. This will ensure your reverse-proxy "
"configuration always matches the application configuration and makes "
"upgrade/maintenance easier."
msgstr ""

#: ../../installation/index.rst:215
msgid "The following commands need to be run as superuser."
msgstr ""

#: ../../installation/index.rst:217
msgid "On docker deployments, run the following commands:"
msgstr ""

#: ../../installation/index.rst:237
msgid "On non-docker deployments, run the following commands:"
msgstr ""

#: ../../installation/index.rst:259
msgid ""
"The resulting file should not contain any variables such as "
"``${FUNKWHALE_HOSTNAME}``. You can check that using this command::"
msgstr ""

#: ../../installation/index.rst:264
msgid "Finally, enable the resulting configuration:"
msgstr ""

#: ../../installation/index.rst:272
msgid ""
"If you plan to use in-place import, ensure the alias value in the "
"``_protected/music`` location matches your MUSIC_DIRECTORY_SERVE_PATH env"
" var."
msgstr ""

#: ../../installation/index.rst:276
msgid ""
"Finally, check that the configuration is valid with ``nginx -t`` then "
"reload your nginx server with ``sudo systemctl reload nginx``."
msgstr ""

#: ../../installation/index.rst:279
msgid ""
"Music (and other static) files are never served by the app itself, but by"
" the reverse proxy. This is needed because a webserver is way more "
"efficient at serving files than a Python process."
msgstr ""

#: ../../installation/index.rst:283
msgid ""
"However, we do want to ensure users have the right to access music files,"
" and it can't be done at the proxy's level. To tackle this issue, `we use"
" nginx's internal directive "
"<http://nginx.org/en/docs/http/ngx_http_core_module.html#internal>`_."
msgstr ""

#: ../../installation/index.rst:287
msgid ""
"When the API receives a request on its music serving endpoint, it will "
"check that the user making the request can access the file. Then, it will"
" return an empty response with a ``X-Accel-Redirect`` header. This header"
" will contain the path to the file to serve to the user, and will be "
"picked by nginx, but never sent back to the client."
msgstr ""

#: ../../installation/index.rst:293
msgid ""
"Using this technique, we can ensure music files are covered by the "
"authentication and permission policy of your instance, while remaining as"
" performant as possible."
msgstr ""

#: ../../installation/index.rst:298
msgid "Apache2"
msgstr ""

#: ../../installation/index.rst:302
msgid ""
"These instructions are for Debian only. For Arch Linux please refer to "
"the `Arch Linux wiki <https://wiki.archlinux.org/index.php/Apache>`_."
msgstr ""

#: ../../installation/index.rst:305
msgid ""
"Ensure you have a recent version of Apache2 installed on your server. "
"You'll also need the following dependencies::"
msgstr ""

#: ../../installation/index.rst:310
msgid "Add the following to your ``.env`` file::"
msgstr ""

#: ../../installation/index.rst:314
msgid ""
"Then restart Funkwhale. This is needed to ensure Funkwhale provides "
"proper headers for media file serving."
msgstr ""

#: ../../installation/index.rst:317
msgid "Then, download our sample virtualhost file:"
msgstr ""

#: ../../installation/index.rst:324
msgid ""
"Tweak the configuration file according to your setup, especially the TLS "
"configuration. Otherwise, defaults should work if you followed the "
"installation guide."
msgstr ""

#: ../../installation/index.rst:328
msgid ""
"Check the configuration with ``apache2ctl configtest`` and once you're "
"done, load the new configuration with ``service apache2 restart``."
msgstr ""

#: ../../installation/index.rst:333
msgid "Caddy"
msgstr ""

#: ../../installation/index.rst:335
msgid ""
"We currently do not support a Caddy-only setup, but you can `help develop"
" it "
"<https://dev.funkwhale.audio/funkwhale/funkwhale/-/merge_requests/1384>`_!"
msgstr ""

#: ../../installation/index.rst:338
msgid ""
"To employ Caddy as a reverse proxy in front of your docker containers "
"(either mono- or multi-container setup), use the following Caddyfile "
"configuration:"
msgstr ""

#: ../../installation/index.rst:342
msgid "Caddy v2::"
msgstr ""

#: ../../installation/index.rst:348
msgid "Caddy v1::"
msgstr ""

#: ../../installation/index.rst:359
msgid "HTTPS configuration"
msgstr ""

#: ../../installation/index.rst:361
msgid ""
"After configuring the reverse proxy, you need a SSL certificate to enable"
" HTTPS on your server (unless you use Caddy, which handles them "
"automatically)."
msgstr ""

#: ../../installation/index.rst:365
msgid ""
"The default reverse proxy configuration assumes you have those available "
"at ``/etc/letsencrypt/live/${FUNKWHALE_HOSTNAME}/``, which is the path "
"used by `certbot <https://certbot.eff.org/docs/>`_ when generating "
"certificates with Let's Encrypt."
msgstr ""

#: ../../installation/index.rst:368
msgid ""
"If you already have a certificate you would like to use, simply update "
"the reverse proxy configuration and replace the following values with the"
" proper paths: - For nginx: ``ssl_certificate`` and "
"``ssl_certificate_key``; - For Apache2: ``SSLCertificateFile`` and "
"``SSLCertificateKeyFile``."
msgstr ""

#: ../../installation/index.rst:373
msgid ""
"If you don't have one, comment or remove the lines starting with "
"``ssl_certificate`` and ``ssl_certificate_key`` for nginx, and "
"``SSLCertificateFile`` and ``SSLCertificateKeyFile`` for Apache2. You can"
" then proceed to generate a certificate, as shown below. These "
"instructions are provided by `certbot "
"<https://certbot.eff.org/instructions>`:"
msgstr ""

#: ../../installation/index.rst:389
msgid ""
"This creates a valid certificate and edit the nginx or Apache2 "
"configuration to use the new certificate. The certificate will be "
"automatically renewed when they expire."
msgstr ""

#: ../../installation/non_amd64_architectures.rst:2
msgid "Running Funkwhale on non amd64 architectures"
msgstr ""

#: ../../installation/non_amd64_architectures.rst:4
msgid ""
"Funkwhale should be runnable on any architecture assuming Funkwhale "
"installation dependencies are satisfied."
msgstr ""

#: ../../installation/non_amd64_architectures.rst:6
msgid ""
"On non-docker deployments (e.g. when deploying on debian), this should be"
" completely transparent."
msgstr ""

#: ../../installation/non_amd64_architectures.rst:8
msgid ""
"On docker deployments, you will need to build Funkwhale's image yourself,"
" because we don't provide pre-built multi-arch images on the Docker Hub "
"yet. The build process itself only requires git, Docker and is described "
"below."
msgstr ""

#: ../../installation/non_amd64_architectures.rst:13
msgid "Building the mono-process Docker image (funkwhale/funkwhale)"
msgstr ""

#: ../../installation/non_amd64_architectures.rst:15
msgid ""
"This image is intended to be used in conjunction with our :ref:`Multi-"
"container installation guide <docker-multi-container>`."
msgstr ""

#: ../../installation/non_amd64_architectures.rst:23
#: ../../installation/non_amd64_architectures.rst:61
msgid "Replace by develop for building a development branch image."
msgstr ""

#: ../../installation/non_amd64_architectures.rst:44
msgid "Building the mono-container Docker image (funkwhale/all-in-one)"
msgstr ""

#: ../../installation/non_amd64_architectures.rst:51
msgid ""
"This image is intended to be used in conjunction with our :ref:`Mono-"
"container installation guide <docker-mono-container>`. guide."
msgstr ""

